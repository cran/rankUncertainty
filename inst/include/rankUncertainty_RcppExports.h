// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_rankUncertainty_RCPPEXPORTS_H_GEN_
#define RCPP_rankUncertainty_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace rankUncertainty {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("rankUncertainty", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("rankUncertainty", "_rankUncertainty_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in rankUncertainty");
            }
        }
    }

    inline Rcpp::IntegerVector countPrincipalDownSets(Rcpp::NumericVector left, Rcpp::NumericVector right) {
        typedef SEXP(*Ptr_countPrincipalDownSets)(SEXP,SEXP);
        static Ptr_countPrincipalDownSets p_countPrincipalDownSets = NULL;
        if (p_countPrincipalDownSets == NULL) {
            validateSignature("Rcpp::IntegerVector(*countPrincipalDownSets)(Rcpp::NumericVector,Rcpp::NumericVector)");
            p_countPrincipalDownSets = (Ptr_countPrincipalDownSets)R_GetCCallable("rankUncertainty", "_rankUncertainty_countPrincipalDownSets");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_countPrincipalDownSets(Shield<SEXP>(Rcpp::wrap(left)), Shield<SEXP>(Rcpp::wrap(right)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::IntegerVector >(rcpp_result_gen);
    }

    inline bool getCompatibility(Rcpp::IntegerVector ranking, Rcpp::NumericVector left, Rcpp::NumericVector right) {
        typedef SEXP(*Ptr_getCompatibility)(SEXP,SEXP,SEXP);
        static Ptr_getCompatibility p_getCompatibility = NULL;
        if (p_getCompatibility == NULL) {
            validateSignature("bool(*getCompatibility)(Rcpp::IntegerVector,Rcpp::NumericVector,Rcpp::NumericVector)");
            p_getCompatibility = (Ptr_getCompatibility)R_GetCCallable("rankUncertainty", "_rankUncertainty_getCompatibility");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_getCompatibility(Shield<SEXP>(Rcpp::wrap(ranking)), Shield<SEXP>(Rcpp::wrap(left)), Shield<SEXP>(Rcpp::wrap(right)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<bool >(rcpp_result_gen);
    }

    inline Rcpp::DataFrame getIndexIntervals(Rcpp::NumericVector left, Rcpp::NumericVector right) {
        typedef SEXP(*Ptr_getIndexIntervals)(SEXP,SEXP);
        static Ptr_getIndexIntervals p_getIndexIntervals = NULL;
        if (p_getIndexIntervals == NULL) {
            validateSignature("Rcpp::DataFrame(*getIndexIntervals)(Rcpp::NumericVector,Rcpp::NumericVector)");
            p_getIndexIntervals = (Ptr_getIndexIntervals)R_GetCCallable("rankUncertainty", "_rankUncertainty_getIndexIntervals");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_getIndexIntervals(Shield<SEXP>(Rcpp::wrap(left)), Shield<SEXP>(Rcpp::wrap(right)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::DataFrame >(rcpp_result_gen);
    }

    inline Rcpp::List getPartitionInfo(Rcpp::IntegerVector indices, Rcpp::NumericVector idxLeft, Rcpp::NumericVector idxRight) {
        typedef SEXP(*Ptr_getPartitionInfo)(SEXP,SEXP,SEXP);
        static Ptr_getPartitionInfo p_getPartitionInfo = NULL;
        if (p_getPartitionInfo == NULL) {
            validateSignature("Rcpp::List(*getPartitionInfo)(Rcpp::IntegerVector,Rcpp::NumericVector,Rcpp::NumericVector)");
            p_getPartitionInfo = (Ptr_getPartitionInfo)R_GetCCallable("rankUncertainty", "_rankUncertainty_getPartitionInfo");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_getPartitionInfo(Shield<SEXP>(Rcpp::wrap(indices)), Shield<SEXP>(Rcpp::wrap(idxLeft)), Shield<SEXP>(Rcpp::wrap(idxRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::DataFrame makeCanonicalRep(Rcpp::IntegerVector indices, Rcpp::NumericVector left, Rcpp::NumericVector right) {
        typedef SEXP(*Ptr_makeCanonicalRep)(SEXP,SEXP,SEXP);
        static Ptr_makeCanonicalRep p_makeCanonicalRep = NULL;
        if (p_makeCanonicalRep == NULL) {
            validateSignature("Rcpp::DataFrame(*makeCanonicalRep)(Rcpp::IntegerVector,Rcpp::NumericVector,Rcpp::NumericVector)");
            p_makeCanonicalRep = (Ptr_makeCanonicalRep)R_GetCCallable("rankUncertainty", "_rankUncertainty_makeCanonicalRep");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_makeCanonicalRep(Shield<SEXP>(Rcpp::wrap(indices)), Shield<SEXP>(Rcpp::wrap(left)), Shield<SEXP>(Rcpp::wrap(right)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::DataFrame >(rcpp_result_gen);
    }

}

#endif // RCPP_rankUncertainty_RCPPEXPORTS_H_GEN_
